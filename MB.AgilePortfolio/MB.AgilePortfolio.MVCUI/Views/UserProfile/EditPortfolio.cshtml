@model MB.AgilePortfolio.MVCUI.ViewModels.UserProfile

@{
    ViewBag.Title = "Edit Portfolio";
    Layout = "~/Views/Shared/_Layout.cshtml";
}




@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <!DOCTYPE html>



    <div class="form-horizontal">
        <h4>@Model.Portfolio.Name</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Portfolio.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.Portfolio.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Portfolio.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Portfolio.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Portfolio.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Portfolio.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Portfolio.Description, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @*
                @Html.LabelFor(model => model.Portfolio.PortfolioImage, htmlAttributes: new { @class = "control-label col-md-2" })
            *@
            <div class="col-md-10">
                @Html.HiddenFor(model => model.Portfolio.PortfolioImage, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Portfolio.PortfolioImage, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            <div class="col-md-10">
                @Html.HiddenFor(model => model.Portfolio.UserId, new { htmlAttributes = new { @class = "form-control", @Value = Model.User.Email, disabled = "disabled", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.Portfolio.UserId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Portfolio.PrivacyId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Portfolio.PrivacyId, new SelectList(Model.Privacies, "Id", "Description", Model.Portfolio), null, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Portfolio.PrivacyId, "", new { @class = "text-danger" })
            </div>
        </div>
        <html>
        <head>
            <meta name="viewport" content="width=device-width" />
            <script src="~/scripts/jquery-3.3.1.min.js"></script>
            <script src="~/scripts/bootstrap.min.js"></script>
            <script src="~/scripts/jquery.dataTables.min.js"></script>
            <script src="~/scripts/dataTables.bootstrap4.min.js"></script>
            <script type="text/javascript">
                $(document).ready(function () {
                    $("#dataTable").dataTable();
                });
            </script>
            @if (Model.Projects?.Count > 0)
            {
                int ImagesPerTransition1 = 4;
                int iterations1 = (int)Math.Ceiling(((double)Model.Projects.Count) / ImagesPerTransition1);
                string width = "";
                if (iterations1 == 1 && (Model.Projects.Count % ImagesPerTransition1) > 0)
                {
                    //Adjust size if less than images per transition
                    width = ((Math.Floor((double)(99 / (Model.Projects.Count % ImagesPerTransition1))))).ToString() + "%";
                }
                else
                {
                    //Adjust size of images to fit ~100% for the images per transition
                    width = ((Math.Floor((double)(99 / ImagesPerTransition1)))).ToString() + "%";
                }
                //THIS NEEDS TO BE FIXED SO IT CENTERS THE ITEMS (padding is solely for nav arrows to not overlap images)
                <style>
                    .carousel-inner img {
                        width: 100px;
                        height: 100px;
                    }

                    .carousel-inner {
                        padding-left: 10%;
                        padding-right: 10%;
                        width: 100%;
                    }
                </style>
            }
        </head>
        <body>
            <div class="form-horizontal">
                <h4>Projects</h4>
                <hr />
                <div id="demo" class="carousel slide" data-ride="carousel">
                    <ul class="carousel-indicators">

                        @{
                            int i = 0;
                            int imgleft = Model.Projects.Count;
                            int ImagesPerTransition = 4;
                        }

                    </ul>
                    <div class="carousel-inner" role="listbox">

                        @if (Model.Projects?.Count > 0)
                        {

                            int modssi = Model.Projects.Count % ImagesPerTransition;
                            int iterations = 0;
                            imgleft = Model.Projects.Count;

                            if (modssi > 0)
                            {
                                if (Model.Projects.Count > ImagesPerTransition - 1)
                                {
                                    iterations = (int)Math.Ceiling(((double)Model.Projects.Count) / ImagesPerTransition);

                                }
                                else
                                {
                                    iterations = 1;
                                }
                            }
                            else
                            {
                                iterations = (Model.Projects.Count) / ImagesPerTransition;
                            }
                            var active = iterations == 1 ? "active" : "";

                            for (int ssi = 0; ssi < iterations; ssi++)
                            {
                                if (ssi == 0)
                                {
                                    if (iterations > 1)
                                    {
                                        <div class="carousel-item active">
                                            @for (int y = 0; y < ImagesPerTransition; y++)
                                            {

                                                <p>@Model.Projects[y].Name</p>
                                                string imgpath = "~/" + @Model.Projects[y].Image;
                                                <a href='@Url.Action("PublicProject", "UserProfile",new { id = Model.Projects[y].Id})'>
                                                    <img src='@Url.Content(@imgpath)' />
                                                </a>
                                                imgleft--;
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="carousel-item active">
                                            @for (int y = 0; y < modssi; y++)
                                            {
                                                <p>@Model.Projects[y].Name</p>
                                                string imgpath = "~/" + @Model.Projects[y].Image;
                                                <a href='@Url.Action("PublicProject", "UserProfile",new { id = Model.Projects[y].Id})'>
                                                    <img src='@Url.Content(@imgpath)' />
                                                </a>
                                                imgleft--;
                                            }
                                        </div>
                                    }
                                }
                                else
                                {
                                    if (imgleft >= ImagesPerTransition)
                                    {
                                        <div class="carousel-item">
                                            @for (int y = 0; y < ImagesPerTransition; y++)
                                            {
                                                <p>@Model.Projects[y + ssi * ImagesPerTransition].Name</p>
                                                string imgpath = "~/" + @Model.Projects[y + ssi * ImagesPerTransition].Image;
                                                <a href='@Url.Action("PublicProject", "UserProfile",new { id = Model.Projects[y + ssi * ImagesPerTransition].Id})'>
                                                    <img src='@Url.Content(@imgpath)' />
                                                </a>

                                                imgleft--;
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        string width = ((Math.Floor((double)(99 / modssi)))).ToString() + "%";
                                        <div class="carousel-item">

                                            @for (int y = 0; y < modssi; y++)
                                            {
                                                <p>@Model.Projects[y + ssi * ImagesPerTransition].Name</p>
                                                string imgpath = "~/" + @Model.Projects[y + ssi * ImagesPerTransition].Image;
                                                <a href='@Url.Action("PublicProject", "UserProfile",new { id = Model.Projects[y + ssi * ImagesPerTransition].Id})'>
                                                    <img src='@Url.Content(@imgpath)' />
                                                </a>
                                                imgleft--;
                                            }
                                        </div>
                                    }
                                }
                            }
                        }

                    </div>
                    <a class="carousel-control-prev" href="#demo" data-slide="prev">
                        <span class="carousel-control-prev-icon"></span>
                    </a>
                    <a class="carousel-control-next" href="#demo" data-slide="next">
                        <span class="carousel-control-next-icon"></span>
                    </a>

                </div>
            </div>
        </body>
    </html>

    <hr />
    <div class="row">

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-primary" style="margin-left:40px" />
            </div>
        </div>

        <div class="form-group">

        </div>

        <div class="form-group">
            <div class="col-md-12">
                @Html.ActionLink(
               "Delete",
               "DeletePortfolio",
               "UserProfile",
               new { id = Model.Portfolio.Id },
               new { @class = "btn btn-primary", @style = "margin-left:60px" }
               )
            </div>
        </div>
    </div>
    <div class="col-md-offset-2 col-md-12">
        @Html.ActionLink("Back to Portfolios", "EditPortfolios", null, null, new { @class = "btn btn-default" })
    </div>
</div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
