@model MB.AgilePortfolio.MVCUI.ViewModels.ScreenshotProjects

@{
    ViewBag.Title = "Edit Project";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Edit Project</h2>


@using (Html.BeginForm("EditProject", "Screenshot", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <!DOCTYPE html>

    <html>
    <head>
        <meta name="viewport" content="width=device-width" />
        <script src="~/scripts/jquery-3.3.1.min.js"></script>
        <script src="~/scripts/bootstrap.min.js"></script>
        <!--
        <script src="~/scripts/jquery.dataTables.min.js"></script>
        <script src="~/scripts/dataTables.bootstrap4.min.js"></script>
            -->
        <script src="~/scripts/autosizeTextarea.js"></script>
        <style>

            #myImg {
                border-radius: 5px;
                cursor: pointer;
                transition: 0.3s;
            }

                #myImg:hover {
                    opacity: 0.7;
                }

            /* The Modal (background) */
            .modal {
                display: none; /* Hidden by default */
                position: fixed; /* Stay in place */
                z-index: 1; /* Sit on top */
                padding-top: 100px; /* Location of the box */
                left: 0;
                top: 0;
                width: 100%; /* Full width */
                height: 100%; /* Full height */
                overflow: auto; /* Enable scroll if needed */
                background-color: rgb(0,0,0); /* Fallback color */
                background-color: rgba(0,0,0,0.9); /* Black w/ opacity */
            }

            /* Modal Content (image) */
            .modal-content {
                margin: auto;
                display: block;
                width: 80%;
                max-width: 700px;
            }

            /* Caption of Modal Image */
            #caption {
                margin: auto;
                display: block;
                width: 80%;
                max-width: 700px;
                text-align: center;
                color: #ccc;
                padding: 10px 0;
                height: 150px;
            }

            /* Add Animation */
            .modal-content, #caption {
                -webkit-animation-name: zoom;
                -webkit-animation-duration: 0.6s;
                animation-name: zoom;
                animation-duration: 0.6s;
            }




            /* The Close Button */
            .close {
                position: absolute;
                top: 15px;
                right: 35px;
                color: #f1f1f1;
                font-size: 40px;
                font-weight: bold;
                transition: 0.3s;
            }

                .close:hover,
                .close:focus {
                    color: #bbb;
                    text-decoration: none;
                    cursor: pointer;
                }




            .multiselect {
                width: 200px;
            }

            .selectBox {
                position: relative;
            }

                .selectBox select {
                    width: 100%;
                    font-weight: bold;
                }

            .overSelect {
                position: absolute;
                left: 0;
                right: 0;
                top: 0;
                bottom: 0;
            }

            #checkboxes {
                display: none;
                border: 1px #dadada solid;
            }

                #checkboxes label {
                    display: block;
                }

                    #checkboxes label:hover {
                        background-color: #1e90ff;
                    }

            .carousel-inner img {
                width: 10%;
                height: 100px;
                object-fit: contain;
                margin-left: auto;
                margin-right: auto;
                cursor: pointer
            }

            .carousel-inner {
                padding-left: 10%;
                padding-right: 10%;
                width: 100%;
            }

            .carousel-item {
                text-align: center;
            }

            html {
                width: 100%;
            }

            body {
                width: 100%;
                word-wrap: break-word;
            }

            .container {
                max-width: none;
                width: 100% !important;
                padding-right: 15px;
                padding-left: 15px;
                margin-right: 0;
                margin-left: 0;
            }

            .sidebar {
                padding: 5px;
            }

            input, textarea, select {
                max-width: none;
            }

            .multiselect {
                width: 100%;
            }
        </style>


    </head>

    <body>
        <h2 align="center">@Model.Project.Name</h2>
        <div class="container py-4" style="text-align:center">
            <img src="~/@Model.Project.Image" alt="" style="width:100%;height:350px; text-align:center; object-fit:contain;">
        </div>
        @if (Model.ScreenshotList?.Count > 0)
        {
            <hr />
            <h4 align="center">Screenshots</h4>
        }


        <!-- The Modal -->
        <div id="myModal" class="modal">
            <span class="close">&times;</span>
            <img class="modal-content" id="img01">
            <div id="caption"></div>
        </div>

        @{
            int imgleft = Model.ScreenshotList.Count;
            int ImagesPerTransition = 9;
        }

        <div id="demo" class="carousel slide" data-ride="carousel" data-interval="10000">



            <div class="carousel-inner">
                @if (Model.ScreenshotList?.Count > 0)
                {
                    int count = 1;

                    int modssi = Model.ScreenshotList.Count % ImagesPerTransition;
                    int iterations = 0;
                    imgleft = Model.ScreenshotList.Count;

                    if (modssi > 0)
                    {
                        if (Model.ScreenshotList.Count > ImagesPerTransition - 1)
                        {
                            iterations = (int)Math.Ceiling(((double)Model.ScreenshotList.Count) / ImagesPerTransition);

                        }
                        else
                        {
                            iterations = 1;
                        }
                    }
                    else
                    {
                        iterations = (Model.ScreenshotList.Count) / ImagesPerTransition;
                    }
                    var active = iterations == 1 ? "active" : "";

                    for (int ssi = 0; ssi < iterations; ssi++)
                    {
                        if (ssi == 0)
                        {
                            if (iterations > 1)
                            {
                                <div class="carousel-item active">
                                    @for (int y = 0; y < ImagesPerTransition; y++)
                                    {
                                        @*<p>@Model.ScreenshotList[y].Name</p>*@
                                        string imgpath = "~/" + Model.ScreenshotList[y].FilePath;
                                        string jsimgpath = Model.ScreenshotList[y].FilePath;
                                        @*<a href='@Url.Action("PublicProject", "UserProfile",new { id = Model.Projects[y].Id})'>*@
                                        <img src='@Url.Content(@imgpath)' id=@count onclick="openImage(@count)" />


                                        @*</a>*@
                                        imgleft--;
                                        count++;
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="carousel-item active">
                                    @for (int y = 0; y < Model.ScreenshotList.Count; y++)
                                    {
                                        @*<p>@Model.Projects[y].Name</p>*@
                                        string imgpath = "~/" + Model.ScreenshotList[y].FilePath;
                                        string jsimgpath = Model.ScreenshotList[y].FilePath;
                                        <img src='@Url.Content(imgpath)' id=@count onclick="openImage(@count)" />
                                        imgleft--;
                                        count++;
                                    }
                                </div>
                            }
                        }
                        else
                        {
                            if (imgleft >= ImagesPerTransition)
                            {
                                <div class="carousel-item">
                                    @for (int y = 0; y < ImagesPerTransition; y++)
                                    {
                                        @*<p>@Model.Projects[y + ssi * ImagesPerTransition].Name</p>*@
                                        string imgpath = "~/" + Model.ScreenshotList[y + ssi * ImagesPerTransition].FilePath;
                                        string jsimgpath = Model.ScreenshotList[y + ssi * ImagesPerTransition].FilePath;
                                        @*<a href='@Url.Action("PublicProject", "UserProfile",new { id = Model.ScreenshotList[y + ssi * ImagesPerTransition].Id})'>*@

                                        <img src='@Url.Content(@imgpath)' id=@count onclick="openImage(@count)" />
                                        @*</a>*@

                                        imgleft--;
                                        count++;
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="carousel-item">
                                    @for (int y = 0; y < modssi; y++)
                                    {
                                        @*<p>@Model.Projects[y + ssi * ImagesPerTransition].Name</p>*@
                                        string imgpath = "~/" + Model.ScreenshotList[y + ssi * ImagesPerTransition].FilePath;
                                        string jsimgpath = Model.ScreenshotList[y + ssi * ImagesPerTransition].FilePath;
                                        @*<a href='@Url.Action("PublicProject", "UserProfile",new { id = Model.Projects[y + ssi * ImagesPerTransition].Id})'>*@
                                        <img src='@Url.Content(@imgpath)' id=@count onclick="openImage(@count)" />
                                        @*</a>*@
                                        imgleft--;
                                        count++;
                                    }
                                </div>
                            }
                        }
                    }

                }
            </div>

            @if (Model.ScreenshotList?.Count > ImagesPerTransition)
            {
                <a class="carousel-control-prev" href="#demo" data-slide="prev" style="width:auto">
                    <i class="fas fa-chevron-left text-dark"></i>
                </a>
                <a class="carousel-control-next" href="#demo" data-slide="next" style="width:auto">
                    <i class="fas fa-chevron-right text-dark"></i>
                </a>
            }

        </div>

        <ul class="nav nav-tabs">
            <li class="active nav-item"><a href="#firsttab" data-toggle="tab" class="nav-link">Basic Info</a></li>
            <li class="nav-item"><a href="#secondtab" data-toggle="tab" class="nav-link">Project Details</a></li>
        </ul>

        <div class="tab-content p-3">
            <div class="tab-pane active" id="firsttab">

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.Project.Id)

                <div class="form-group">
                    @Html.LabelFor(model => model.Project.Name, htmlAttributes: new { @class = "control-label offset-md-1 col-md-10" })
                    <div class="offset-md-1 col-md-10">
                        @Html.EditorFor(model => model.Project.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Project.Name, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Project.Description, htmlAttributes: new { @class = "control-label offset-md-1 col-md-10" })
                    <div class="offset-md-1 col-md-10">
                        @Html.EditorFor(model => model.Project.Description, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Project.Description, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Project.StatusId, htmlAttributes: new { @class = "control-label offset-md-1 col-md-10" })
                    <div class="offset-md-1 col-md-10">
                        @Html.DropDownListFor(model => model.Project.StatusId, new SelectList(Model.Statuses, "Id", "Description", Model.Project), null, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Project.StatusId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Project.PrivacyId, htmlAttributes: new { @class = "control-label offset-md-1 col-md-10" })
                    <div class="offset-md-1 col-md-10">
                        @Html.DropDownListFor(model => model.Project.PrivacyId, new SelectList(Model.Privacies, "Id", "Description", Model.Project), null, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Project.PrivacyId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.DateCreated, htmlAttributes: new { @class = "control-label offset-md-1 col-md-10" })
                    <div class="offset-md-1 col-md-10">
                        @Html.EditorFor(model => model.DateCreated, new { htmlAttributes = new { @class = "form-control", Type = "date" } })
                        @Html.ValidationMessageFor(model => model.Project.DateCreated, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.LastUpdated, htmlAttributes: new { @class = "control-label offset-md-1 col-md-10" })
                    <div class="offset-md-1 col-md-10">
                        @Html.EditorFor(model => model.LastUpdated, new { htmlAttributes = new { @class = "form-control", Type = "date" } })
                        @Html.ValidationMessageFor(model => model.Project.LastUpdated, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>





            <div class="tab-pane" id="secondtab">
                <div class="form-group">
                    @Html.LabelFor(model => model.Project.Purpose, htmlAttributes: new { @class = "control-label offset-md-1 col-md-10" })
                    <div class="offset-md-1 col-md-10">
                        @Html.EditorFor(model => model.Project.Purpose, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Project.Purpose, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Project.Challenges, htmlAttributes: new { @class = "control-label offset-md-1 col-md-10" })
                    <div class="offset-md-1 col-md-10">
                        @Html.EditorFor(model => model.Project.Challenges, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Project.Challenges, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Project.FuturePlans, htmlAttributes: new { @class = "control-label offset-md-1 col-md-10" })
                    <div class="offset-md-1 col-md-10">
                        @Html.EditorFor(model => model.Project.FuturePlans, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Project.FuturePlans, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Project.SoftwareUsed, htmlAttributes: new { @class = "control-label offset-md-1 col-md-10" })
                    <div class="offset-md-1 col-md-10">
                        @Html.EditorFor(model => model.Project.SoftwareUsed, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Project.SoftwareUsed, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Project.Environment, htmlAttributes: new { @class = "control-label offset-md-1 col-md-10" })
                    <div class="offset-md-1 col-md-10">
                        @Html.EditorFor(model => model.Project.Environment, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Project.Environment, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.Project.Collaborators, htmlAttributes: new { @class = "control-label offset-md-1 col-md-10" })
                    <div class="offset-md-1 col-md-10">
                        @Html.EditorFor(model => model.Project.Collaborators, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Project.Collaborators, "", new { @class = "text-danger" })
                    </div>
                </div>



                <div class="form-group">
                    @Html.LabelFor(model => model.Project.Location, htmlAttributes: new { @class = "control-label offset-md-1 col-md-10" })
                    <div class="offset-md-1 col-md-10">
                        @Html.EditorFor(model => model.Project.Location, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Project.Location, "", new { @class = "text-danger" })
                    </div>
                </div>



                <div class="form-group">
                    @*Html.LabelFor(model => model.Project.Filepath, htmlAttributes: new { @class = "control-label offset-md-1 col-md-10" })*@
                    <div class="offset-md-1 col-md-10">
                        @Html.HiddenFor(model => model.Project.Filepath, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Project.Filepath, "", new { @class = "text-danger" })
                    </div>
                </div>



                <div class="form-group">
                    <div class="offset-md-1 col-md-10">
                        @Html.HiddenFor(model => model.Project.Image, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Project.Image, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.Label("Languages", htmlAttributes: new { @class = "control-label offset-md-1 col-md-10" })
                    <div class="offset-md-1 col-md-10">
                        <div class="multiselect">
                            <div class="selectBox" onclick="showCheckboxes()">
                                <select id="languageSelect">
                                    <option id="langoptions">
                                        @{
                                            string listedLangs = "";
                                            if (Model.SelectedLanguages.Count < 1)
                                            {
                                                listedLangs = "Select Languages";
                                            }
                                            else
                                            {
                                                foreach (var lang in Model.SelectedLanguages)
                                                {
                                                    listedLangs += lang;
                                                }
                                            }
                                        }
                                        @listedLangs
                                    </option>
                                </select>
                                <div class="overSelect"></div>
                            </div>
                            <div id="checkboxes">
                                @foreach (var lang in Model.AvailableLanguages)
                                {
                                    if (Model.SelectedLanguages.Contains(lang.Text + ";"))
                                    {
                                        <div class="checkbox">
                                            <label>
                                                <input type="checkbox"
                                                       id="@lang.Text" onclick="AddLanguage('@lang.Text')"
                                                       name="SelectedLanguages"
                                                       checked="checked"
                                                       value="@lang.Value" /> @lang.Text
                                                </label>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="checkbox">
                                                <label>
                                                    <input type="checkbox"
                                                           id="@lang.Text" onclick="AddLanguage('@lang.Text')"
                                                           name="SelectedLanguages"
                                                           value="@lang.Value" /> @lang.Text
                                                    </label>
                                                </div>
                                            }
                                        }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="offset-md-1 col-md-10">
                        @Html.HiddenFor(model => model.Project.UserId, new { htmlAttributes = new { @class = "form-control", disabled = "disabled", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.Project.UserId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="offset-md-1 col-md-10">

                        <label>Upload Display Image</label>
                        <div class="input-group">
                            <div class="custom-file">
                                @Html.TextBoxFor(model => model.Fileupload, new { type = "file", id = "fileupload", name = "fileupload", accept = ".jpg, .jpeg, .gif, .png" })
                            </div>
                        </div>
                    </div>

                    <div class="offset-md-1 col-md-10">
                        @Html.HiddenFor(model => model.Project.Image, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Fileupload, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="offset-md-1 col-md-10">

                        <label>Upload ZipFile</label>
                        <div class="input-group">
                            <div class="custom-file">
                                @Html.TextBoxFor(model => model.ZipFileupload, new { type = "file", id = "Zipfileupload", name = "Zipfileupload", accept = ".zip" })
                            </div>
                        </div>
                    </div>

                    <div class="offset-md-1 col-md-10">
                        @Html.HiddenFor(model => model.Project.Filepath, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ZipFileupload, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>


            <div class="form-horizontal">
                <hr />

            </div>

            <div class="form-group">
                <div class="offset-md-1 col-md-10 text-center">
                    @Html.ActionLink(
                   "Edit/Upload Screenshots",
                   "UploadProjectSliderImage",
                   "Screenshot",

                   new { id = Model.Project.Id },
                   new { @class = "btn btn-primary"}
                   )
                </div>
            </div>

            <div class="row">
                <div class="offset-md-1 col-md-10 text-center">
                    <input type="submit" value="Save" class="btn btn-primary" />
                    <a href="~/User/@Model.User.UrlFriendlyName/Projects/@Model.Project.UrlFriendlyName" class="btn btn-primary">View Project</a>

                    @Html.ActionLink(
                     "Delete",
                     "DeleteProject",
                     "UserProfile",
                     new { id = Model.Project.Id },
                     new { @class = "btn btn-primary" }
                     )
                </div>

                <div class="col-md-offset-2 col-md-12">
                    @Html.ActionLink("Back to Projects", "EditProjects", "UserProfile")
                </div>
            </div>
        </div>
    </body>
</html>
}

<script>

    var expanded = false;

    function showCheckboxes() {
        var checkboxes = document.getElementById("checkboxes");
        if (!expanded) {
            checkboxes.style.display = "block";
            expanded = true;
        } else {
            checkboxes.style.display = "none";
            expanded = false;
        }
    }

    function AddLanguage(id) {
        var checkbox = document.getElementById(id);
        var option = document.getElementById("langoptions");
        if (checkbox.checked == true) {
            var text = option.innerText
            if (text.trim() == "Select Languages") {
                option.innerText = option.innerText.replace("Select Languages", "");
            }
            option.innerText += id + ";";
        }
        if (checkbox.checked == false) {
            option.innerText = option.innerText.replace(id + ";", "");
            var newtext = option.innerText
            if (newtext.trim() == "") {
                option.innerText = "Select Languages";
            }
        }
    }
    function openImage(id) {
        // Get the modal
        var modal = document.getElementById('myModal');

        // Get the image and insert it inside the modal - use its "alt" text as a caption
        var img = document.getElementById(id);
        var modalImg = document.getElementById("img01");
        var captionText = document.getElementById("caption");
        modal.style.display = "block";
        modalImg.src = img.src;
        captionText.innerHTML = img.alt;


        // Get the <span> element that closes the modal
        var span = document.getElementsByClassName("close")[0];

        // When the user clicks on <span> (x), close the modal
        span.onclick = function () {
            modal.style.display = "none";
        }
    }

    $('textarea').autoResize();
</script>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
