@model MB.AgilePortfolio.MVCUI.ViewModels.ProjectPrivaciesUserStatuses

@{
    /**/

    ViewBag.Title = "Create New Project";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="~/scripts/autosizeTextarea.js"></script>

@using (Html.BeginForm("Create", "CreateNewProject", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <h2>Create New Project</h2>
    <style>
        .multiselect {
            width: 200px;
        }

        .selectBox {
            position: relative;
        }

            .selectBox select {
                width: 100%;
                font-weight: bold;
            }

        .overSelect {
            position: absolute;
            left: 0;
            right: 0;
            top: 0;
            bottom: 0;
        }

        #checkboxes {
            display: none;
            border: 1px #dadada solid;
        }

            #checkboxes label {
                display: block;
            }

                #checkboxes label:hover {
                    background-color: #1e90ff;
                }

        input, textarea, select {
            max-width: none;
        }

        .multiselect {
            width: 100%;
        }
    </style>


    <ul class="nav nav-tabs">
        <li class="active nav-item"><a href="#firsttab" data-toggle="tab" class="nav-link">Basic Info</a></li>
        <li class="nav-item"><a href="#secondtab" data-toggle="tab" class="nav-link">Project Details</a></li>
    </ul>

    <div class="tab-content p-3">
        <div class="tab-pane active" id="firsttab">
            @{ DateTime CurrentDate = DateTime.Now;}
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Project.Id)

            <div class="form-group">
                @Html.LabelFor(model => model.Project.Name, htmlAttributes: new { @class = "control-label offset-md-1 col-md-10" })
                <div class="offset-md-1 col-md-10">
                    @Html.EditorFor(model => model.Project.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Project.Name, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.Project.Description, htmlAttributes: new { @class = "control-label offset-md-1 col-md-10" })
                <div class="offset-md-1 col-md-10">
                    @Html.EditorFor(model => model.Project.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Project.Description, "", new { @class = "text-danger" })
                </div>
            </div>




            <div class="form-group">
                @Html.LabelFor(model => model.Project.StatusId, htmlAttributes: new { @class = "control-label offset-md-1 col-md-10" })
                <div class="offset-md-1 col-md-10">
                    @Html.DropDownListFor(model => model.Project.StatusId, new SelectList(Model.Statuses, "Id", "Description", Model.Project), null, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Project.StatusId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Project.PrivacyId, htmlAttributes: new { @class = "control-label offset-md-1 col-md-10" })
                <div class="offset-md-1 col-md-10">
                    @Html.DropDownListFor(model => model.Project.PrivacyId, new SelectList(Model.Privacies, "Id", "Description", Model.Project), null, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Project.PrivacyId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.DateCreated, htmlAttributes: new { @class = "control-label offset-md-1 col-md-10" })
                <div class="offset-md-1 col-md-10">
                    @Html.EditorFor(model => model.DateCreated, new { htmlAttributes = new { @class = "form-control", Type = "date", @Value = CurrentDate.ToString("yyyy-MM-dd") } })
                    @Html.ValidationMessageFor(model => model.Project.DateCreated, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.LastUpdated, htmlAttributes: new { @class = "control-label offset-md-1 col-md-10" })
                <div class="offset-md-1 col-md-10">
                    @Html.EditorFor(model => model.LastUpdated, new { htmlAttributes = new { @class = "form-control", Type = "date", @Value = CurrentDate.ToString("yyyy-MM-dd") } })
                    @Html.ValidationMessageFor(model => model.Project.LastUpdated, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>





        <div class="tab-pane" id="secondtab">
            <div class="form-group">
                @Html.LabelFor(model => model.Project.Purpose, htmlAttributes: new { @class = "control-label offset-md-1 col-md-10" })
                <div class="offset-md-1 col-md-10">
                    @Html.EditorFor(model => model.Project.Purpose, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Project.Purpose, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Project.Challenges, htmlAttributes: new { @class = "control-label offset-md-1 col-md-10" })
                <div class="offset-md-1 col-md-10">
                    @Html.EditorFor(model => model.Project.Challenges, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Project.Challenges, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Project.FuturePlans, htmlAttributes: new { @class = "control-label offset-md-1 col-md-10" })
                <div class="offset-md-1 col-md-10">
                    @Html.EditorFor(model => model.Project.FuturePlans, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Project.FuturePlans, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Project.SoftwareUsed, htmlAttributes: new { @class = "control-label offset-md-1 col-md-10" })
                <div class="offset-md-1 col-md-10">
                    @Html.EditorFor(model => model.Project.SoftwareUsed, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Project.SoftwareUsed, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Project.Environment, htmlAttributes: new { @class = "control-label offset-md-1 col-md-10" })
                <div class="offset-md-1 col-md-10">
                    @Html.EditorFor(model => model.Project.Environment, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Project.Environment, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.Project.Collaborators, htmlAttributes: new { @class = "control-label offset-md-1 col-md-10" })
                <div class="offset-md-1 col-md-10">
                    @Html.EditorFor(model => model.Project.Collaborators, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Project.Collaborators, "", new { @class = "text-danger" })
                </div>
            </div>



            <div class="form-group">
                @Html.LabelFor(model => model.Project.Location, htmlAttributes: new { @class = "control-label offset-md-1 col-md-10" })
                <div class="offset-md-1 col-md-10">
                    @Html.EditorFor(model => model.Project.Location, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Project.Location, "", new { @class = "text-danger" })
                </div>
            </div>



            <div class="form-group">
                @*Html.LabelFor(model => model.Project.Filepath, htmlAttributes: new { @class = "control-label offset-md-1 col-md-10" })*@
                <div class="offset-md-1 col-md-10">
                    @Html.HiddenFor(model => model.Project.Filepath, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Project.Filepath, "", new { @class = "text-danger" })
                </div>
            </div>



            <div class="form-group">
                @*
            @Html.LabelFor(model => model.Project.Image, htmlAttributes: new { @class = "control-label col-md-2" })
                *@
                <div class="offset-md-1 col-md-10">
                    @Html.HiddenFor(model => model.Project.Image, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Project.Image, "", new { @class = "text-danger" })
                </div>
            </div>





            <div class="form-group">
                @Html.Label("Languages", htmlAttributes: new { @class = "control-label offset-md-1 col-md-10" })
                <div class="offset-md-1 col-md-10">
                    <div class="multiselect">
                        <div class="selectBox" onclick="showCheckboxes()">
                            <select id="languageSelect">
                                <option id="langoptions">
                                    @{
                                        string listedLangs = "";
                                        if (Model.SelectedLanguages.Count < 1)
                                        {
                                            listedLangs = "Select Languages";
                                        }
                                        else
                                        {
                                            foreach (var lang in Model.SelectedLanguages)
                                            {
                                                listedLangs += lang;
                                            }
                                        }
                                    }
                                    @listedLangs
                                </option>
                            </select>
                            <div class="overSelect"></div>
                        </div>
                        <div id="checkboxes">
                            @foreach (var lang in Model.AvailableLanguages)
                            {
                                if (Model.SelectedLanguages.Contains(lang.Text + ";"))
                                {
                                    <div class="checkbox">
                                        <label>
                                            <input type="checkbox"
                                                   id="@lang.Text" onclick="AddLanguage('@lang.Text')"
                                                   name="SelectedLanguages"
                                                   checked="checked"
                                                   value="@lang.Value" /> @lang.Text
                                            </label>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="checkbox">
                                            <label>
                                                <input type="checkbox"
                                                       id="@lang.Text" onclick="AddLanguage('@lang.Text')"
                                                       name="SelectedLanguages"
                                                       value="@lang.Value" /> @lang.Text
                                                </label>
                                            </div>
                                        }
                                    }
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div class="offset-md-1 col-md-10">
                    @Html.HiddenFor(model => model.Project.UserId, new { htmlAttributes = new { @class = "form-control", disabled = "disabled", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Project.UserId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="offset-md-1 col-md-10">

                    <label>Upload ZipFile</label>
                    <div class="input-group">
                        <div class="custom-file">
                            @Html.TextBoxFor(model => model.ZipFileupload, new { type = "file", id = "Zipfileupload", name = "Zipfileupload", accept = ".zip" })
                        </div>
                        @*
                    <div class="input-group-append">
                        <input type="submit" id="btnUpload" class="btn btn-secondary" value="Upload" />
                    </div>
                        *@
                    </div>
                </div>

                <div class="offset-md-1 col-md-10">
                    @Html.HiddenFor(model => model.Project.Image, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Fileupload, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="offset-md-1 col-md-10">

                    <label>Upload Display Image</label>
                    <div class="input-group">
                        <div class="custom-file">
                            @Html.TextBoxFor(model => model.Fileupload, new { type = "file", id = "fileupload", name = "fileupload", accept = ".jpg, .jpeg, .gif, .png" })
                        </div>
                        @*
                    <div class="input-group-append">
                        <input type="submit" id="btnUpload" class="btn btn-secondary" value="Upload" />
                    </div>
                        *@
                    </div>
                </div>

                <div class="offset-md-1 col-md-10">
                    @Html.HiddenFor(model => model.Project.Image, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Fileupload, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>


    <div class="form-group">
        <div class="offset-md-1 col-md-10 text-right">
            <input type="submit" value="Create" class="btn btn-secondary" />
        </div>
    </div>




    <div class="form-group">
        <div class="col-md-offset-2 col-md-12">
            @Html.ActionLink("Back to Projects", "EditProjects", "UserProfile")
        </div>
    </div>

}
<script>
    var expanded = false;

    function showCheckboxes() {
        var checkboxes = document.getElementById("checkboxes");
        if (!expanded) {
            checkboxes.style.display = "block";
            expanded = true;
        } else {
            checkboxes.style.display = "none";
            expanded = false;
        }
    }

    function AddLanguage(id) {
        var checkbox = document.getElementById(id);
        var option = document.getElementById("langoptions");
        if (checkbox.checked == true) {
            var text = option.innerText
            if (text.trim() == "Select Languages") {
                option.innerText = option.innerText.replace("Select Languages", "");
            }
            option.innerText += id + ";";
        }
        if (checkbox.checked == false) {
            option.innerText = option.innerText.replace(id + ";", "");
            var newtext = option.innerText
            if (newtext.trim() == "") {
                option.innerText = "Select Languages";
            }
        }
    }

    $('textarea').autoResize();
</script>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
